Controller() {
    new UserDaoSQL
    new ProductDaoSQL
    new OrderDaoSQL
    new View
    new InputValidator
    new Reader(View, InputValidator)
    new int userId = 0;
    private Basket; - without initialization
}

runner() {
    while (exitApp) {
        clearScreen()
        displayMenu(userId) - (e. Exit, s. Show products, li. Login, r.Register, - if not login)
                              (e. Exit, s. Place order, lo. Log out, b. go to Basket - if logged)

        option = reader.getInput();
        switch(option) {
            s:
                if(user login){
                    ProductChooser - no basket
                } else {
                    ProductChooser - constructor with basket
                }
                productChooser.controller()
            li:
            lo:
                Logger - package handler
                logger.controller(userId, basket)
            r:
                Register - package handler
                register.controller()

            b:
                basket.controller(basket)

            default:
                No option available!

        }
    }
}

clearScreen()
displayMenu(userType)


///////////////////////////////////////////////
ProductChooser
ProductChooser(Reader, Viewer, InputValidator, ProductDao,) {
    List<Product>; - only initialize
}ProductChooser(Reader, Viewer, InputValidator, ProductDao, basket) {
    this(Reader, Viewer, InputValidator, ProductDao,)
    basket = basket;
    List<Product>; - only initialize
}

controller {
    displayMenu() (1. Back to main menu, 2. By category,
                   3. By name, 4. By price)
    displayMenu() (1. Back to main menu, 2. By category,
                   3. By name, 4. By price, 5. Add product to basket)


    while (backToMenu) {
        option = reader.getInput();
        switch(option) {
            1:
                mainMenu()
                backToMenu = false;
            2:
                TreeMap<Integer, String> categories = productDaoSQL.getCategories()
                displayCategories(categories)
                category = reader.displayQuestionWhichCategory()
                List<Products> = getProductsFromDatabase(categoryId)
                displayProducts(List<Product>)
            3:
                name = reader.enterProductName()
                List<Products> = getProductsFromDatabase(product)
                displayProducts(List<Product>)
            4:
                List<Products> = getProductsFromDatabase(price)
                displayProducts(List<Product>)
            5:
                if userId != 0 {
                    addProductToBasket(priductIndex, quantity) - in basket only add id and quantity, name,
                                             not object
                }

            default:
                No option available!
    }
}

displayMenu()
displayCategories(categories)
displayProducts(List<Product>)
addProductToBasket(id) - check if amount of product available.

///////////////////////////////////////////////
Logger
Logger(Reader, Viewer, InputValidator, UserDaoSQL - interface)

controller(userId, basket) {
    if userId = 0  {
        loginUser() - login, password, and check in database
        // take from user string login and password, next in database
        if record exists, next return true false if achieved or not
        if true initialize basket:
        basket = new Basket(userId)

    } else {
        logoutUser()
    }

}

loginUser()
logoutUser()

///////////////////////////////////////////////
Register
Register(Reader, Viewer, InputValidator, UserDaoSQL - interface)

controller() {
    login = reader.getUserLogin()
    password = reder.getUserPassword()

    if(!checkIfUserLoginExist(login);) {
        Credentials creds = new Credentials(login, password);
        User user = new User(creds);
        userDaoSQL.createUser(user: User) -add simple User constructor login/password
    }
}
checkIfUserLoginExist(login);

///////////////////////////////////////////////
BasketOperator
BasketOperator(Reader, Viewer, InputValidator, OrderDao, PdoductDao)

controller(basket) {
    displayBasket(basket)
    displayMenu() (1. mainMenu 2. Edit quantity 3. Confirm order)

    while (backToMenu) {
        option = reader.askUserAboutOption()
        switch(option) {
            1:
                mainMenu()
                backToMenu = false;
            2:
                editQuantity(basket)
            3:
                confirmOrder(basket)
            default:
                No option available!
        }
    }
}

displayMenu()
displayBasket()
editQuantity() - check if new amount is in store
confirmOrder()

///////////////////////////////////////////////
public class User {
    private int id;
    private Credentials creds;
    private Details details;
    private List<Address> addresses;

    public User(Credentials cred) {
        this.cred = cred;
    }

    public User(Credentials credentals, int id, Details details List<Address> addresses){
        this(credentials)
        this.id = id;
        this.details = details;
        this.addresses = addresses;
    }
}

///////////////////////////////////////////////
public class Credentials {
    private String login;
    private String password;

    public Credentials(String login, String password) {
        this.login = login;
        this.password = password;
    }

    public String getLogin() {
        return login;
    }

    public String getPassword() {
        return password;
    }

    public String toString() {
        return "";
    }
}

///////////////////////////////////////////////
public class Details {
    private String name;
    private String lastName;


    public Details(String name, String laseName) {
        this.name = name;
        this.lastName = laseName;
    }

    public String getName() {
        return name;
    }

    public String getLastName() {
        return lastName;
    }
}

///////////////////////////////////////////////
Address {
    String street;
    String country;
    String zipCode;
    String city;

    Address(String street, String country, String zipCode, String city) {
        this.street = street;
        this.country = country;
        this.zipCode = zipCode;
        this.city = city;
    }


}